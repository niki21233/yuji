--manga yuji
local player = game.Players.LocalPlayer
local char = player.Character
local Humanoid = char.Humanoid
local hot = player.PlayerGui:WaitForChild("Hotbar")
local hotbar = hot:WaitForChild("Backpack"):WaitForChild("Hotbar")
-- 14516273501

local function cloneToolName(slot, text)
    local toolName = slot.ToolName
    if not slot:FindFirstChild("SkibidiGame") then
        toolName.Visible = false
        local clone = toolName:Clone()
        clone.Name = "SkibidiGame"
        clone.Parent = slot
        clone.Text = text
        clone.Visible = true
    elseif slot:FindFirstChild("SkibidiGame") then
        if slot:FindFirstChild("SkibidiGame").Text ~= text then
            toolName.Visible = false
            slot:FindFirstChild("SkibidiGame").Text = text
        end
    end
end
-- 10470104242
local magichealth = player.PlayerGui:WaitForChild("ScreenGui"):WaitForChild("MagicHealth")
local UltLabel = player.PlayerGui:WaitForChild("ScreenGui"):WaitForChild("MagicHealth"):WaitForChild("TextLabel")
UltLabel.Visible = false
local UltLabel = UltLabel:Clone()
UltLabel.Visible = true
UltLabel.Name = "SkibidiRizzlerGyattOhio"
UltLabel.Parent = magichealth
task.spawn(function()
    while true do
     UltLabel.Text = "lost control/im you"
        for _, slot in ipairs(hotbar:GetChildren()) do
            if slot:FindFirstChild("Base") and slot.Base:FindFirstChild("ToolName") then
                local toolNameText = slot.Base.ToolName.Text
                if toolNameText == "Flowing Water" then
                    cloneToolName(slot.Base, "manji barage")
                elseif toolNameText == "Lethal Whirlwind Stream" then
                    cloneToolName(slot.Base, "skull crusier")
                elseif toolNameText == "Hunter's Grasp" then
                    cloneToolName(slot.Base, "piercing blood")
                elseif toolNameText == "Prey's Peril" then
                    cloneToolName(slot.Base, "manji kick")
                elseif toolNameText == "Water Stream Rock Smashing" then
                    cloneToolName(slot.Base, "barage/cleve barage")
                elseif toolNameText == "The Final Hunt" then
                    cloneToolName(slot.Base, "slamkick")
                elseif toolNameText == "Rock Splitting Fist" then
                    cloneToolName(slot.Base, "black flash/cleve graps")
                elseif toolNameText == "Crushed Rock" then
                    cloneToolName(slot.Base, "slam/trone rush")
                end
            end
        end
        task.wait(1)
    end
end)
-- Create a ScreenGui
local player = game.Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "WatermarkGui"
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create a TextLabel for the watermark
local watermarkLabel = Instance.new("TextLabel")
watermarkLabel.Name = "WatermarkLabel"
watermarkLabel.Text = "manga yuji by beluganiki on discord version 1"  -- Customize your watermark text here
watermarkLabel.Font = Enum.Font.SourceSans
watermarkLabel.TextSize = 24  -- Set the size of the text
watermarkLabel.TextColor3 = Color3.fromRGB(255, 255, 255)  -- White color
watermarkLabel.BackgroundTransparency = 1  -- Make the background transparent
watermarkLabel.Position = UDim2.new(0.5, 0, 0, 10)  -- Position it at the top center
watermarkLabel.AnchorPoint = Vector2.new(0.5, 0)  -- Center the anchor point horizontally
watermarkLabel.Parent = screenGui

-- Optional: Make the watermark slightly transparent
watermarkLabel.TextTransparency = 0.8  -- Adjust transparency if needed



--[[Animations]]

--[[move 1]]
local animationId = 12273188754

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://18181589384"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Optional: Adjust the animation speed and start time
        local startTime = 0
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(1)
        newAnimTrack.TimePosition = startTime

        -- Add particle effect from Sorcerer LimitlessBarrier
        local Test = game.ReplicatedStorage.Resources.Sorcerer.LimitlessBarrier["Core"].Appear
        local test = Test:Clone()
        test.Parent = character["HumanoidRootPart"]

        for _, child in ipairs(test:GetChildren()) do
            if child:IsA("ParticleEmitter") then
                child:Emit(15)
                child.Enabled = true
            end
        end

        -- Remove the cloned attachment after 3 seconds
        game:GetService("Debris"):AddItem(test, 2)
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)


--[[move 1 fhinesher]]
local animationId = 14374357351

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://18464372850"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Play the animation
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(1.3)

        -- Delay the appearance of the effect by 2 seconds
        task.delay(2, function()
            -- Add particle effect
            local Test = game.ReplicatedStorage.Resources.KJEffects.DropkickExtra["lastimpact"].Attachment
            local test = Test:Clone()
            test.Parent = character["HumanoidRootPart"]

            for _, child in ipairs(test:GetChildren()) do
                if child:IsA("ParticleEmitter") then
                    child:Emit(15)
                    child.Enabled = true
                end
            end

            -- Remove the effect after 1 second
            game:GetService("Debris"):AddItem(test, 1)

            -- Send the "BLACK FLASH!" message in the chat
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("BLACK FLASH!", "All")
        end)
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)


--[[2 move]]
local animationId = 12296113986

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://18464362124"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Play the animation
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(2)

        -- Add particle effect and set color to light blue
        local effectTemplate = game.ReplicatedStorage.Resources.SunsetEffects["FlameWind"].AtomicWind.Windy
        local effectClone = effectTemplate:Clone()
        effectClone.Parent = character["HumanoidRootPart"]

        -- Customize particle effect color to light blue
        for _, child in ipairs(effectClone:GetChildren()) do
            if child:IsA("ParticleEmitter") then
                child.Color = ColorSequence.new(Color3.fromRGB(67, 164, 255)) -- Light blue
                child:Emit(15)
                child.Enabled = true
            end
        end

        -- Remove the cloned attachment after 3 seconds
        game:GetService("Debris"):AddItem(effectClone, 2)
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)








--[[3 move]]

local Players = game:GetService("Players")

-- Animation ID that triggers the random animations
local animationId = 12309835105

-- List of additional animation IDs to play randomly
local randomAnimationIds = {
    "rbxassetid://16584277208"
}

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Function to play a random animation from the list
local function playRandomAnimation()
    -- Stop all currently playing animations
    for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
        animTrack:Stop()
    end

    -- Select a random animation ID from the list
    local randomIndex = math.random(1, #randomAnimationIds)
    local randomAnimationId = randomAnimationIds[randomIndex]

    -- Load and play the selected random animation
    local animInstance = Instance.new("Animation")
    animInstance.AnimationId = randomAnimationId
    local animTrack = humanoid:LoadAnimation(animInstance)
    animTrack:Play()
    animTrack:AdjustSpeed(2)

    -- Add particle effect from FiveSeasonsFX
    local Test = game.ReplicatedStorage.Resources.FiveSeasonsFX["CharFX"].ArmBurst.Attachment
    local test = Test:Clone()
    test.Parent = character["HumanoidRootPart"]

    for _, child in ipairs(test:GetChildren()) do
        if child:IsA("ParticleEmitter") then
            child:Emit(15)
            child.Enabled = true
        end
    end

    -- Remove the cloned attachment after 3 seconds
    game:GetService("Debris"):AddItem(test, 1.5)
end

-- Function called when an animation is played
local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        playRandomAnimation() -- Call to play a random animation and add particle effect
    end
end

-- Connect the AnimationPlayed event to the function
humanoid.AnimationPlayed:Connect(onAnimationPlayed)










--[[4 move ]]


-- Define animation ID to listen for
local animationId = 12351854556

-- Get the player and their character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid from the character
local humanoid = character:WaitForChild("Humanoid")

-- Define the function that runs when an animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the desired animation ID
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Load a new animation
        local newAnim = Instance.new("Animation")
        newAnim.AnimationId = "rbxassetid://17464923657"
        local animTrack = humanoid:LoadAnimation(newAnim)

        -- Set the start time and adjust the speed
        local startTime = 1
        animTrack:Play()
        animTrack:AdjustSpeed(1.9)
        animTrack.TimePosition = startTime
        animTrack:AdjustSpeed(1.9) -- You already set speed to 2, so this line can be optional
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)


--[[4 move hit]]


-- Define animation ID to listen for
local animationId = 13603396939

-- Get the player and their character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid from the character
local humanoid = character:WaitForChild("Humanoid")

-- Define the function that runs when an animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the desired animation ID
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Load a new animation
        local newAnim = Instance.new("Animation")
        newAnim.AnimationId = "rbxassetid://17838619895"
        local animTrack = humanoid:LoadAnimation(newAnim)

        -- Set the start time and adjust the speed
        local startTime = 0
        animTrack:Play()
        animTrack:AdjustSpeed(0.3)
        animTrack.TimePosition = startTime
        animTrack:AdjustSpeed(0.3) -- You already set speed to 2, so this line can be optional
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)





--[[Dash]]

local animationId = 10479335397 -- The animation ID to listen for
local player = game.Players.LocalPlayer -- Get the player
local character = player.Character or player.CharacterAdded:Wait() -- Get the player's character
local humanoid = character:WaitForChild("Humanoid") -- Get the humanoid

-- Function to handle the played animation
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the desired animation ID
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Load and play the new animation
        local newAnim = Instance.new("Animation")
        newAnim.AnimationId = "rbxassetid://17838006839" -- Dash animation ID
        local animTrack = humanoid:LoadAnimation(newAnim)

        -- Set the start time and play the animation
        local startTime = 0
        animTrack.TimePosition = startTime
        animTrack:Play()

        -- Adjust the speed of the animation
        animTrack:AdjustSpeed(1.3) -- Set your desired speed

        -- Stop the animation after 1.8 seconds
        delay(1.8, function()
            animTrack:Stop()
        end)
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)


--[[ ult animation]]

-- Define animation ID to listen for (animation triggering)
local animationId = 12342141464

-- Get the player and their character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid from the character
local humanoid = character:WaitForChild("Humanoid")

-- Variable to keep track of the last played animation
local lastAnimationId = ""

-- Define the function that runs when an animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the desired animation ID
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Randomly choose between two animations (animation 1 or animation 2)
        local animations = {
            "rbxassetid://15507137974",  -- Animation 1
            "rbxassetid://15962326593"   -- Animation 2
        }

        -- Pick a random animation from the list
        local randomAnimationId = animations[math.random(1, #animations)]

        -- Store the last animation id played
        lastAnimationId = randomAnimationId

        -- Load the randomly selected animation
        local newAnim = Instance.new("Animation")
        newAnim.AnimationId = randomAnimationId
        local animTrack = humanoid:LoadAnimation(newAnim)

        -- Set the start time and adjust the speed
        local startTime = 0
        animTrack:Play()
        animTrack:AdjustSpeed(1)
        animTrack.TimePosition = startTime
        animTrack:AdjustSpeed(1) -- You already set speed to 1, so this line can be optional

        -- Optional: Add a particle effect or any other effect based on the animation
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[1 ult move]]
-- Define animation ID to listen for ult move 1 animation
local ultMove1Id = 12460977270

-- Define the function for handling ult move 1
local function onUltMove1Played(animationTrack)
    -- Check if the played animation matches the desired animation ID for ult move 1
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. ultMove1Id then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Check what the previous animation was and take action
        if lastAnimationId == "rbxassetid://15507137974" then
            -- Change animation to a different one for ult move 1 if the previous animation was 15507137974
            local newAnim = Instance.new("Animation")
            newAnim.AnimationId = "rbxassetid://15290930205"  -- Animation to change to
            local animTrack = humanoid:LoadAnimation(newAnim)

            -- Play the new animation
            local startTime = 0
            animTrack:Play()
            animTrack:AdjustSpeed(1)
            animTrack.TimePosition = startTime
            animTrack:AdjustSpeed(1)

            -- Trigger the particle effect when this animation plays
            local Test = game.ReplicatedStorage.Resources.PinpointFinisher["GlintTime"].Attachment
            local test = Test:Clone()
            test.Parent = game.Players.LocalPlayer.Character["HumanoidRootPart"]

            for _, child in ipairs(test:GetChildren()) do
                if child:IsA("ParticleEmitter") then
                    child:Emit(15)
                    child.Enabled = true
                end
            end

            -- Remove the particle effect after 2 seconds
            delay(2, function()
                test:Destroy()
            end)

        elseif lastAnimationId == "rbxassetid://15962326593" then
            -- If the previous animation was 15962326593, keep the same animation (ult move 1 animation)
            local newAnim = Instance.new("Animation")
            newAnim.AnimationId = "rbxassetid://12534735382"  -- Keep this animation
            local animTrack = humanoid:LoadAnimation(newAnim)

            -- Play the same animation (move 1 animation)
            local startTime = 0
            animTrack:Play()
            animTrack:AdjustSpeed(1)
            animTrack.TimePosition = startTime
            animTrack:AdjustSpeed(1)
        end
    end
end

-- Connect the function to the AnimationPlayed event for ult move 1
humanoid.AnimationPlayed:Connect(onUltMove1Played)


--[[ ult move 3]] 

-- Define animation ID to listen for ult move 1 animation
local ultMove1Id = 14057231976

-- Define the function for handling ult move 1
local function onUltMove1Played(animationTrack)
    -- Check if the played animation matches the desired animation ID for ult move 1
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. ultMove1Id then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Check what the previous animation was and take action
        if lastAnimationId == "rbxassetid://15507137974" then
            -- Change animation to a different one for ult move 1 if the previous animation was 15507137974
            local newAnim = Instance.new("Animation")
            newAnim.AnimationId = "rbxassetid://15310973900"  -- Animation to change to
            local animTrack = humanoid:LoadAnimation(newAnim)

            -- Play the new animation
            local startTime = 0
            animTrack:Play()
            animTrack:AdjustSpeed(1)
            animTrack.TimePosition = startTime
            animTrack:AdjustSpeed(1)

        elseif lastAnimationId == "rbxassetid://15962326593" then
            -- If the previous animation was 15962326593, change animation to 18896127525
            local newAnim = Instance.new("Animation")
            newAnim.AnimationId = "rbxassetid://18896127525"  -- New animation when 15962326593 is played
            local animTrack = humanoid:LoadAnimation(newAnim)

            -- Play the new animation (move 1 animation)
            local startTime = 0
            animTrack:Play()
            animTrack:AdjustSpeed(1)
            animTrack.TimePosition = startTime
            animTrack:AdjustSpeed(1)

            -- Now trigger the particle effect
            local Test = game.ReplicatedStorage.Resources.KJEffects.DropkickExtra["lastimpact"].Attachment
            local test = Test:Clone()
            test.Parent = game.Players.LocalPlayer.Character["HumanoidRootPart"]

            -- Emit particles
            for _, child in ipairs(test:GetChildren()) do
                if child:IsA("ParticleEmitter") then
                    child:Emit(15)
                    child.Enabled = true
                end
            end

            -- Remove the particle effect after 3 seconds
            delay(1.5, function()
                -- Clean up the particle effect after 3 seconds
                test:Destroy()
            end)
        end
    end
end

-- Connect the function to the AnimationPlayed event for ult move 1
humanoid.AnimationPlayed:Connect(onUltMove1Played)

--[[ult move 4]]
-- Function to create a chat bubble above the player's head
local function showFakeChatBubble(message, duration)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local head = character:WaitForChild("Head")

    -- Create a BillboardGui for the chat bubble
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "FakeChatBubble"
    billboardGui.Size = UDim2.new(0, 200, 0, 50)
    billboardGui.StudsOffset = Vector3.new(0, 3, 0) -- Offset above the head
    billboardGui.Adornee = head
    billboardGui.Parent = head

    -- Create the TextLabel inside the BillboardGui
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.TextColor3 = Color3.new(1, 1, 1) -- White text
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextScaled = true
    textLabel.Text = message
    textLabel.Parent = billboardGui

    -- Remove the chat bubble after the specified duration
    delay(duration, function()
        billboardGui:Destroy()
    end)
end

-- Define animation ID to listen for ult move 1 animation
local ultMove1Id = 13813099821

-- Define the function for handling ult move 1
local function onUltMove1Played(animationTrack)
    -- Check if the played animation matches the desired animation ID for ult move 1
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. ultMove1Id then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Check what the previous animation was and take action
        if lastAnimationId == "rbxassetid://15507137974" then
            -- Change animation to a different one for ult move 1 if the previous animation was 15507137974
            local newAnim = Instance.new("Animation")
            newAnim.AnimationId = "rbxassetid://18450698238"  -- Animation to change to
            local animTrack = humanoid:LoadAnimation(newAnim)

            -- Play the new animation
            local startTime = 0
            animTrack:Play()
            animTrack:AdjustSpeed(1)
            animTrack.TimePosition = startTime
            animTrack:AdjustSpeed(1)

        elseif lastAnimationId == "rbxassetid://15962326593" then
            -- If the previous animation was 15962326593, change animation to 18896127525
            local newAnim = Instance.new("Animation")
            newAnim.AnimationId = "rbxassetid://14351441234"  -- New animation when 15962326593 is played
            local animTrack = humanoid:LoadAnimation(newAnim)

            -- Play the new animation (move 1 animation)
            local startTime = 0
            animTrack:Play()
            animTrack:AdjustSpeed(1)
            animTrack.TimePosition = startTime
            animTrack:AdjustSpeed(1)

            -- Now trigger the particle effect
            local Test = game.ReplicatedStorage.Resources.Dragon["Explosion"].Part.Main
            local test = Test:Clone()
            test.Parent = game.Players.LocalPlayer.Character["HumanoidRootPart"]

            -- Change particle color to blue
            for _, child in ipairs(test:GetChildren()) do
                if child:IsA("ParticleEmitter") then
                    -- Set the particle color to blue
                    child.Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(67, 164, 255)),  -- Start: Blue
                        ColorSequenceKeypoint.new(1, Color3.fromRGB(67, 164, 255)) -- End: Light Blue
                    })

                    -- Emit particles
                    child:Emit(15)
                    child.Enabled = true
                end
            end

            -- Remove the particle effect after 3 seconds
            delay(2, function()
                -- Clean up the particle effect after 3 seconds
                test:Destroy()
            end)
        end
    elseif animationTrack.Animation.AnimationId == "rbxassetid://18450698238" then
        -- If the animation triggered is 18450698238, show a fake chat bubble
        showFakeChatBubble("Bow before me, fool!", 3) -- Show the message for 3 seconds
    end
end

-- Connect the function to the AnimationPlayed event for ult move 1
humanoid.AnimationPlayed:Connect(onUltMove1Played)















--[[Punch anims]]
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local Debris = game:GetService("Debris")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local animationIdsToStop = {
    [17859015788] = true,  -- punch id
    [13370310513] = true,  -- punch1
    [13390230973] = true,  -- punch2
    [13378751717] = true,  -- punch3
    [13378708199] = true,  -- punch4
}

local replacementAnimations = {
    ["13370310513"] = "rbxassetid://17889458563", -- punch1
    ["13390230973"] = "rbxassetid://17889461810", -- punch2
    ["13378751717"] = "rbxassetid://17889471098", -- punch3
    ["13378708199"] = "rbxassetid://17889461810", -- punch4
}



local isAnimating = false
local queue = {}

local function playReplacementAnimation(animationId)
    if isAnimating then
        -- Queue the animation if it's already animating
        table.insert(queue, animationId)
        return
    end

    isAnimating = true
    local replacementAnimationId = replacementAnimations[tostring(animationId)]
    if replacementAnimationId then
        -- Load and play the replacement animation
        local animAnim = Instance.new("Animation")
        animAnim.AnimationId = replacementAnimationId
        local anim = humanoid:LoadAnimation(animAnim)
        anim:Play()

        anim.Stopped:Connect(function()
            -- Once animation finishes, reset the flag and play the next animation in queue if available
            isAnimating = false
            if #queue > 0 then
                local nextAnimationId = table.remove(queue, 1)
                playReplacementAnimation(nextAnimationId)
            end
        end)
    else
        -- If there's no replacement animation, just reset the flag
        isAnimating = false
    end
end

local function stopSpecificAnimations()
    -- Stop all animations that match the IDs in the stop list
    for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
        local animationId = tonumber(track.Animation.AnimationId:match("%d+"))
        if animationIdsToStop[animationId] then
            track:Stop()
        end
    end
end

local function onAnimationPlayed(animationTrack)
    local animationId = tonumber(animationTrack.Animation.AnimationId:match("%d+"))
    if animationIdsToStop[animationId] then
        -- Stop animations that need to be replaced
        stopSpecificAnimations()
        animationTrack:Stop()

        local replacementAnimationId = replacementAnimations[tostring(animationId)]
        if replacementAnimationId then
            playReplacementAnimation(animationId)
        end
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

local function createBillboardText(text)
    -- Create and display a billboard text on top of the character's head
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Parent = character:WaitForChild("Head")
    billboardGui.StudsOffset = Vector3.new(0, 2, 0)
    billboardGui.Size = UDim2.new(0, 200, 0, 50)
    billboardGui.AlwaysOnTop = true

    local textLabel = Instance.new("TextLabel")
    textLabel.Parent = billboardGui
    textLabel.TextColor3 = Color3.new(1, 1, 1)
    textLabel.BackgroundTransparency = 1
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.Font = Enum.Font.SourceSans
    textLabel.TextSize = 24
    textLabel.Text = ""

    local typeSpeed = 0.1
    for i = 1, #text do
        textLabel.Text = text:sub(1, i)
        wait(typeSpeed)
    end

    wait(1)
    billboardGui:Destroy()
end

local function onKeyPress(input, gameProcessedEvent)
    if input.KeyCode == Enum.KeyCode.G and not gameProcessedEvent then
        local texts = {"Sukuna...You are me", "and...Im you.", "im you and you are me.", "it is always like that."}
        local text = texts[math.random(1, #texts)]
        spawn(function()
            createBillboardText(text)
        end)
    end
end

UserInputService.InputBegan:Connect(onKeyPress)


local function createCloneTrail()
    -- Creates clone trails after certain animations
    if player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
        for i = 1, 10 do
            spawn(function()
                local clone = player.Character:Clone()
                clone.Parent = workspace

                for _, descendant in pairs(clone:GetDescendants()) do
                    if descendant:IsA("BillboardGui") or descendant:IsA("TextLabel") then
                        descendant:Destroy()
                    end
                end

                for _, part in pairs(clone:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Anchored = true
                        part.CanCollide = false
                        part.Transparency = 0.5
                        part.CastShadow = false
                    end
                end

                local humanoidRootPart = clone:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                    humanoidRootPart.Anchored = true
                    humanoidRootPart.CanCollide = false
                    humanoidRootPart.Transparency = 0.5
                    humanoidRootPart.CastShadow = false
                end

                local humanoid = clone:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid:Destroy()
                end

                local tweenService = game:GetService("TweenService")
                local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                for _, part in pairs(clone:GetDescendants()) do
                    if part:IsA("BasePart") then
                        local tween = tweenService:Create(part, tweenInfo, {Transparency = 1})
                        tween:Play()
                    end
                end

                Debris:AddItem(clone, 2)
            end)
            wait(0.1)
        end
    end
end

local function onAnimation(id, func)
    -- Tracks animation and triggers a function
    local id = tostring(id):gsub("rbxassetid://", "")
    local char = game:GetService("Players").LocalPlayer.Character
    local humanoid = char and char:WaitForChild("Humanoid", 1)

    if char and humanoid then
        local connection = humanoid.AnimationPlayed:Connect(function(v)
            local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
            if id == vID then
                func()
                connection:Disconnect()
            end
        end)
    end
end

onAnimation("rbxassetid://17859015788", createCloneTrail)
